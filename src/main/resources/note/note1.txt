//复制bean
package org.springframework.beans;
BeanUtils.copyProperties(vo, newVo);


//  <<    >>   运算技巧
m<<n  ==  m*2的n次方
m>>n ==   m/2的n次方 ,取整


序列化就是将对象转换成字节码保存
反序列化，就是将字节码转化为对象
transient int modCount;
transient 修饰的属性是不会被序列化的


//HashMap
是通过数组和链表来实现的，存放的是key 和value键值对
HashMap是在bucket中储存键对象和值对象
数组指的是 node节点数组=也就是bucket桶
Node[] table=new Node[16] 散列桶初始化
put过程
对key取hash值，计算下标，将k,v放入桶中
key的hash值相同，以链表的形式存放到一个bucket中
如果链表的长度超过阈值8，把链表转化为红黑树，链表长度低于6，就把红黑树转回链表
如果节点已经存在就替换旧值
如果桶满了(容量16*加载因子0.75)，就需要 resize（扩容2倍后重排）
get过程
通过key的hash值找到bucket的位置，如果存在链表，则调用equals方法，找到正确的节点

//ConcurrentHashMap
高并发情况下的实现方式

IO：
同步阻塞式IO，并发处理能力低
NIO:
同步非阻塞式IO
AIO：Asynchronous ：
是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。



//集合才有iterator方法
map.entrySet 是一个Map.Entry集合


//并行和并发
你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发。  （不一定是同时的）
你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行。


//Thread
继承Thread类，重写run方法，当前对象使用start方法启动线程

//Runnable
实现runnable接口，重写run方法，当前对象作为构造参数传入Thread类，Thread类的实例使用start方法启动线程

//Callable
实现Callable接口，重写call方法（有返回值），创建FutureTask对象，当前对象作为构造参数传入FutureTask类，
FutureTask对象作为构造参数传入Thread类，Thread类的实例使用start方法启动线程


//
Thread.sleep(3000);当前线程进入阻塞状态，另一个线程拿到时间片会执行


//类锁  一个类下的所有对象都可以访问
	synchronized public static void mB(String value) throws InterruptedException {
		for (int i = 0; i < 1000; i++) {
			System.out.print(value);
		}
	}

	public void mC(String value) {
		synchronized (B.class) {
			for (int i = 0; i < 1000; i++) {
				System.out.print(value);
			}
		}
	}

//对象锁 当前对象才可以访问
	synchronized public void mB(String value) throws InterruptedException {
		for (int i = 0; i < 1000; i++) {
			System.out.print(value);
		}
	}

	public void mC(String value) {
		synchronized (this) {
			for (int i = 0; i < 1000; i++) {
				System.out.print(value);
			}
		}
	}


//跨域和同源策略
同源是指，域名，协议，端口相同
跨域，指的是从一个域名去请求另外一个域名的资源。即跨域名请求！
跨域时，浏览器不能执行其他域名网站的脚本，是由浏览器的同源策略造成的，是浏览器施加的安全限制。


//子类继承父类，子类创建对象的时候，隐式的调用父类的无参构造，如果父类定义了有参构造，
则需要在子类的构造方法里第一行显示的调用super（xx）方法，
如果子类没有显示的调用，父类又没有无参构造，则编译出错


//】
classloader，加载class文件到内存中的
jvm加载类的实现方式是双亲委托模型
java默认提供了三个classloader，从高到低依次是
Bootstrap ClassLoader 加载JVM自身工作需要的类
Extension ClassLoader   加载jdk目录下\lib\ext\ 下的类
ApplicationClassLoader（system class loader）  加载classpath指定的库类

//二维数组
float f[][] = new float[6][];
float []f[] = new float[6][6];
float [][]f = new float[6][];
左边f可以任意位置，右边第一个[]必须有值，代表二维数组中有多少个一维数组


//
先父类-再子类
父类静态变量，静态代码块
子类静态变量，静态代码块
父类普通成员变量，代码块，构造方法
子类普通成员变量，代码块，构造方法


//AOP
连接点：定义在方法层面，则一个类可能有多个连接点
切点：定义了通知被应用的位置-----定义了在什么位置做，
通知：有五种通知类型，连接点方法被调用之前，之后，成功调用，出现异常，环绕时候。会调用通知方法
--------定义了什么时候做
目标对象：通知的织入目标类
引介：是特殊的通知，为类添加一些属性和方法

织入：织入是将通知添加对目标类具体连接点上的过程
  a、编译期织入，这要求使用特殊的Java编译器。
  b、类装载期织入，这要求使用特殊的类装载器。
  c、动态代理织入，在运行期为目标类添加通知生成子类的方式。

代理：
一个类被AOP织入通知后，就产出了一个结果类，它是融合了原类和通知逻辑的代理类。
根据不同的代理方式，代理类既可能是和原类具有相同接口的类，也可能就是原类的子类，
所以我们可以采用调用原类相同的方式调用代理类。

切面：由切点和通知组成，切面知道他需要做的事，何时何处做什么


//servlet
每次请求只会产生一个线程

//jsp
是一种运行在标准的HTML页面中嵌入脚本语言（现在只支持Java）的模板页面技术。
本质就是在html代码中嵌入java代码。JSP最终还是会被编译为Servlet，
只不过比纯Servlet开发页面更简单、方便。


//Spring
//事务


//
编译看左边，运行看右边
父类为子类实例化对象,向上转型
Father father =new Son()
父类会调用自己的方法，如果子类有重写的方法就调用子类重写的方法，
如果调用了子类特有的方法就编译报错

//IO和NIO区别
IO是面向流的，NIO是面向缓冲区的
Java IO面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。
此外，它不能前后移动流中的数据。
数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。
阻塞与非阻塞IO
Java IO的各种流是阻塞的。这意味着，当一个线程调用read() 或 write()时，该线程被阻塞，直到有一些数据被读取，
或数据完全写入。该线程在此期间不能再干任何事情了。
Java NIO的非阻塞模式，一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。
选择器（Selectors）
Java NIO的选择器允许一个单独的线程来监视多个输入通道

如果需要管理同时打开的成千上万个连接，这些连接每次只是发送少量的数据，例如聊天服务器，实现NIO的服务器可能是一个优势。
如果你有少量的连接使用非常高的带宽，一次发送大量的数据，也许典型的IO服务器实现可能非常契合。